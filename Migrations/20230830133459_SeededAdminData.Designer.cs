// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehiChoice.Data;

#nullable disable

namespace VehiChoice.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230830133459_SeededAdminData")]
    partial class SeededAdminData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VehiChoice.Models.Entities.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchHeadName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BranchLocation")
                        .HasColumnType("int");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.BranchCars", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CarId");

                    b.ToTable("BranchCars");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.BranchHead", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BranchLocation")
                        .HasColumnType("int");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BranchHeads");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.BranchUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("BranchUsers");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BranchLocation")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CarImageReference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UniqueNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Deposit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WalletNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WalletPin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("BenefactorWalletNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BeneficiaryWalletNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageReferece")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WalletType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "001",
                            DateCreated = "7/14/2023",
                            Email = "bigboss@gmail.com",
                            FirstName = "Big",
                            Gender = 1,
                            ImageReferece = "",
                            IsDeleted = false,
                            LastName = "Boss",
                            Location = 1,
                            Password = "pass",
                            PhoneNumber = "+2348155850462",
                            Role = "SuperAdmin",
                            WalletType = 1
                        });
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<double>("WalletBalance")
                        .HasColumnType("double");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WalletNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WalletPin")
                        .HasColumnType("int");

                    b.Property<int>("WalletType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = "001",
                            DateCreated = "7/14/2023",
                            IsDeleted = false,
                            Location = 1,
                            WalletBalance = 0.0,
                            WalletName = "Big Boss",
                            WalletNumber = "WALTID/NBV/001",
                            WalletPin = 1234,
                            WalletType = 1
                        });
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.BranchCars", b =>
                {
                    b.HasOne("VehiChoice.Models.Entities.Branch", "Branch")
                        .WithMany("BranchCars")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiChoice.Models.Entities.Car", "Car")
                        .WithMany("BranchCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.BranchUsers", b =>
                {
                    b.HasOne("VehiChoice.Models.Entities.Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiChoice.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Car", b =>
                {
                    b.HasOne("VehiChoice.Models.Entities.Customer", null)
                        .WithMany("Cars")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Deposit", b =>
                {
                    b.HasOne("VehiChoice.Models.Entities.Customer", null)
                        .WithMany("Deposits")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Payment", b =>
                {
                    b.HasOne("VehiChoice.Models.Entities.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Branch", b =>
                {
                    b.Navigation("BranchCars");

                    b.Navigation("BranchUsers");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Car", b =>
                {
                    b.Navigation("BranchCars");
                });

            modelBuilder.Entity("VehiChoice.Models.Entities.Customer", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Deposits");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
